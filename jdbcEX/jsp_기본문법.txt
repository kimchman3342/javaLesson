<<JSP와 관련된 문법 요소>>
요청된 jsp 파일은 웹컨테이너(was 서버)가 
.java 자바소스파일로 변경 -> 컴파일 -> .class 을 was 서버가 저장해 놓음.
->  웹컨테이너(was 서버) -> html 로 변경
-> 사용자 브라우저에게 전달

1. JSP 기본문법
1) 스크립트릿 : <%    %>
		-> 자바 코드 작성
2) 표현식 : <%=   %>   *자바스크립트 표현식기호 ${} 를 jsp 에서는 el 이라고 부릅니다.
		-> 태그 요소에 출력내용(자바변수,수식,메소드...) 작성
3) 지시자 : <%@    %>  jsp 설정 관련
	ㄴ page 지시자 <%@ page    %>: 언어설정, import 등 jsp파일에서는 필수적인 지시자 		
	ㄴ include 지시자 : file="파일명" . file속성으로 지정된 소스코드를 포함시킴  
	ㄴ taglib 지시자 : 외부 라이브러리 사용하기
4) 선언부 : <%!    %>  변수와 메소드 선언
	변수는 스크립트릿 안에서 선언하고 쓰는 것이 일반적이고
	앞으로 html 태그들과 자바코드를 분리할 것이므로 거의 사용되지 않습니다.

2. 내장 객체 - 미리 만들어진 객체. jsp 라이브러리에서 제공되는 객체. 선언하지 않고 바로 사용.
1) out : html 문서에 출력하기 위한 객체. 태그 요소 출력도 가능합니다.
2) request : 요청. 사용자가 보낸 요청에 대한 정보를 저장하는 객체. (매우 중요 ★★★★★)
   서블릿( 확장자 .java) : 자바 언어로 요청을 처리합니다. 
			jsp파일이 서블릿(.java)로 변경되어 html 파일 생성합니다.
   JSP(확장자 .jsp) : JSP 파일 안에 html, 자바 코드 가 작성됩니다.

3. request 의 파라미터 사용
처리 해야할 사용자 데이터는 request (요청)로 보냅니다. 
보내는 방법은 두가지가 있습니다.
	1) url 의 쿼리스트링 (조회)
		a 태그 href 속성값으로 정하기. 
		자바스크립트의 location.href = '요청url과 쿼리스트링' 
	2) form 태그 사용 (저장)

요청으로 전달받은 데이터(파라미터)를 서버에서 받을때는 request 객체를 사용합니다.메소드는 getParameter()

4. JSTL - Java(S)erver(P)age Standard Tag Library 
        ㄴ apache tomcat 웹사이트에서 jar 파일 다운로드 -> 라이브러리 추가하기

1) core 태그 : 값 저장과 출력, 실행 제어
2) fmt 태그 : format . 출력 포맷 설정하기
            (숫자,날짜 출력형식 / Locale 설정)
3) fn : 함수.문자열 메소드를 함수형태로 사용하기 
       (자바의 문자열 메소드와 상당부분 일치)

5. EL : ※※※${} 은 getAttribute로 값을 가져와서 출력한다.※※※
	애트리뷰트는 4개의 scope 저장소에 보관되는 데이터입니다.
		ㄴ 하나의 웹페이지 범위 안에서 사용할 수 있는 저장소는 pageScope 입니다.
				☞ 내장 객체 이름은 pageContext
		ㄴ 하나의 요청 범위 안에서 사용할 수 있는 저장소는 requestScope 입니다.
				☞ 내장 객체 이름은 request
		
        객체의 프로퍼티는 getter 메소드 직접 작성없이 바로 가져온다.
        getAttribute 메소드의 리턴타입은 Object 이고 ${} 은 타입변환도 합니다


6. ip관련 설정사항입니다.
 java 에서 처리 할때 ipv6 로 출력되는 것을 ipv4 로 표시되게 설정을 바꿉시다. 
 	ㄴ Run - Run Configurations
 	  톰캣의 arguments 항목에 -Djava.net.preferIPv4Stack=true 추가하기

지금까지 2/22 수업내용
1. 요청 파라미터 전달하기
2. jsp 파일의 형식
3. jstl 태그 (반복, 조건, 서식, 함수)
4. 애트리뷰트와 el
5. request 객체의 속성 값 : 요청 URL, context path, 서버와 클라이언트 ip...
6. 서블릿 클래스의 형식
7. 서버측에서 웹페이지 전환하기 fowad
    ㄴ 사용자 요청을 전달하므로 애트리뷰트 값을 jsp로 보낼 수 있음.
	ㄴ forward 에서 사용한 객체는 RequestDispatcher (jsp의 pageContext 역할)
8. 서버측에서 클라이언트가 다른 url 재요청하도록 redirect  
9. 요청 방식(메소드) GET 과 POST
10. 애트리뷰트 : 서버에서 저장하는 Object 타입의 데이터
		 	 	ㄴ 스콥(scope), 사용 범위가 있씁니다.
				ㄴ 우리가 사용해 본 2개 스콥 : 현재 웹페이지(pageContext), 요청(request)
				ㄴ 저장은 스콥객체.setAtrribute() , 읽기는 스콥객체.getAttribute()
<<<<<<< HEAD
=============================================
	서블릿 		기능					요청메소드		주요코드									view(화면)
	A 			고객전체조회			GET				dispather.forward(req,resp)				   customers.jsp
	B			상품전체조회			GET				dispather.forward(req,resp)				   products.jsp
	C           주문전체조회			GET				dispather.forward(req,resp)				   buys.jsp
	D			고객등록 - 화면			GET				dispather.forward(req,resp)				   register.jsp
				   -저장 			    POST			resoponse.sendRedirect(url)				   없음-url 필요
	F 			상품등록 - 화면			GET				dispather.forward(req,resp)			       productReg.jsp
				   -저장				POST		    resoponse.sendRedirect(url)				   없음-url 필요

	(퀴즈) ABC의 GET과 DE의 다른 코드 하나를 찾아보세요. request.setAtrribute("list",list)	
						ㄴ 이유 : 화면에서 보여줄 데이터를 저장. -> 반드시 forward로 해야 합니다.

	(퀴즈) 사용자 요청 파라미터는 POST 방식에서만 전달된다 (O or X)  정답 : X
											ㄴ form 태그로 전달
								 GET 방식에서는 url 쿼리스트링으로 전달.

	(퀴즈) <c:forEach items="${list}" var = "vo">	에서 ${list} 실행 동작 메소드는?
							정답 : 1) request.getAttribute("list") * 리턴타입이 Object
								   2) Object 타입을 알아서 저장된 형식(List<~Vo>)으로 강제 캐스팅

11. 마이바티스 프레임웍 :
					* 라이브러리 사용해서 보다 `구조적으로 SQL 실행`하는 구조적으로 jdbc dao 구현 반복되는 코드를 없애보자. ( sql 파라미터와 자바 객체의 매핑)
					* 마이바티스는 jdbc로 처리하는 상당부분의 코드와 파라미터 설정 및 결과 매핑을 대신 해준다. (참고 : 마이바티스 공식 사이트)
					* 마이바티스 구현 방법 중에는 XML 파일을 사용하는 것이 제일 많이 사용됩니다. 
						ㄴ XML : html 과 같이 태그를 사용하면서 데이터를 저장합니다. 단, html과 같이 지정된 태그를 사용하지 않고 여러가지 형식을 만들어내는 방법이 있습니다. 
								xml 파일은 설정, 데이터 저장 목적으로 사용됩니다. (예시 : 톰캣의 서버 port 설정은 결국 sever.xml 파일 내용입니다.)


1) dml insert, update, delete, select 과 동일한 태그 작성하기
2) dao 메소드에서 지정했던 메소드의 인자 ParameterType, 리턴타입 resultType 정하기
	주의 : 자바 객체의 변수(속성)명과 파라미터 기호 #{} 이름을 동일하게 합니다.
		   파라미터가 Map 일 때에는 key 이름과 파라미터 이름 동일하게 합니다.
		   기본 형식, String 은 변수 선언 키워드와 동일하게 합니다.
3) dto(또는 vo) 클래스는 커스텀 생성자를 사용하고, 컬럼명과 변수명 순서를 같게합니다.
4) namespace, id 속성 값은 개발자가 정합니다.
5) 리턴 타입이 List 일 때에는 제너릭 타입만 설정하면 됩니다.
6) 매퍼에서 select 가 리턴이 여러 행 또는 1개 행인지를 판단하여
			sqlSession 메소드는 selectList 또는 selectOne을 선택해서 사용합니다.
7) dao 메소드 인자가 Map일 때, value의 타입이 다르면 Object로 합니다.
=======


마이바티스 `SqlSession 메소드` 는 이름 자체가 sql명령문과 같습니다
예를 들면 , insert sql 실행할때는 insert 메소드를 실행합니다.

- 메소드 종류
insert
update
delete
selectList : 리턴타입이 List 컬렉션
selectOne: 리턴타입이 컬렉션이 아닙니다.(1개행 조회 - PK컬럼)

- 메소드의 인자
그러면 마이바티스 메소드에게 무엇을 알려줘야 할까요? 실행할 sql 의 id(필수) 와 실행에 필요한 값(선택) 입니다.
insert,update,delete,selectOne 은 100% 값(파라미터)가 필요하다.

- 메소드의 리턴 타입
selectOne, selectList 는 매퍼 xml 에서 반드시 resultType 으로 데이터 형식 설정해야합니다.
insert,update,delete 는 매퍼 xml 에서 반드시 resultType 타입 설정 안하고 메소드에서는 반영된 행의 개수 리턴합니다.


* 마이바티스에서는 실행할 sql이 매처xml에 모여 있으므로 그 파일에 있는 id 값을 써야합니다
* sql 실행에 필요한 값은 sql 명령 중 매개변수 기호 #{} 에 전달됩니다. 이값의 형식을 파라미터 타입으로 설정합니다
*select 쿼리는 실행하면 결과 행을 반환하므로 resultType 으로 데이터의 형식 작성합니다.
>>>>>>> 5252be6bfb41d61017ec908119c32170d16e69a9
